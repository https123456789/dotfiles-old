#!/bin/bash

# This script is a YADM bootstrap program.
#
# General usage form: `sudo -Es yadm bootstrap`
#
# If you don't run it with sudo, your username won't be auto-detected so you will
# need to set the SUDO_USER enviorment variable before running the script.

# Detect the system info
system_type=$(uname -s)
has_apt=$(command -v apt 2>&1 >/dev/null; [ "$?" = "0" ] && (echo 1) || (echo 0))

if [ "$system_type" != "Linux" ]; then
    echo "'$system_type' is not supported!" >&2
fi

# All the apt packages needed in order to continue 
apt_pkgs_required_base=(
    "git" "build-essential" "python3" "libnotify-bin" "fonts-noto-color-emoji"
)

# Colors
color_install="#0373fc"
color_setup="#07ad02"
color_alinstall="#0398fc"
color_install_step="#888888"

# Username
test "${SUDO_USER:=ben}"

# Flags
test "${BOOTSTRAP_FAIL_CHECKS:=0}"

# Make sure to be in the home directory
cd "$HOME"


check_for_install() {
    # Make it so you can forcibly fail checks
    if [ "$BOOTSTRAP_FAIL_CHECKS" = "$1" ]; then
        return 1
    fi

    return $(check_for_command $1)
}

check_for_command() {
    if which $1 2>&1 >/dev/null; then
        return 0
    else
        return 1
    fi
}

state_reset() {
    cd $HOME
}

install_msg() {
    gum style --bold --foreground $color_install "$*"
}

install_step_msg() {
    gum style --foreground $color_install_step "[STEP] $*"
}

install_step_spin() {
    gum spin --title.foreground=$color_install_step --title "[STEP] $1" "${@:2}"
    install_step_msg "$1"
}

already_installed() {
    gum style --bold --foreground $color_alinstall "Yay, $* is already installed!"
}

setup_msg() {
    gum style --bold --foreground $color_setup "$*"
}

fatal() {
    gum style --bold --foreground "#ff0000" "$*" 1>&2
    #exit 1
}


# Make sure a source installs directory exists
mkdir -p "$HOME/source-installs"

echo -e "\nInfo:"
echo -e "\tTarget User: $SUDO_USER"
echo -e "\tSource install directory: $HOME/source-installs\n"

# Make sure apt is present
if [ "$has_apt" = "1" ]; then
    # Perform generic apt update
    echo "Updating apt..."
    sudo apt update -qqq

    # Install the base packages
    echo -n "Installing basic packages needed for rest of install... "
    sudo apt install ${apt_pkgs_required_base[*]} -y -qqq
    echo "Done"

    # Install everything else
    echo -e "\x1b[1m----- Install -----\x1b[0m"

    echo "ðŸ‘€ Looking for color... ðŸ‘€"

    if ! check_for_install gum; then
        echo "Installing gum..."

        # Add the repository for gum
        echo "[STEP] Downloading apt key..."
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://repo.charm.sh/apt/gpg.key | \
            sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg --batch --yes >/dev/null 2>&1
        echo "[STEP] Adding repository to sources..."
        echo "deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *" | \
            sudo tee /etc/apt/sources.list.d/charm.list >/dev/null
        echo "[STEP] Installing package..."
        sudo apt update -qqq && sudo apt install gum -y -qqq

        # Verify install
        if ! check_for_command gum; then
            fatal "Failed to install gum!"
        fi
    else
        already_installed gum
    fi
    
    gum style --foreground "#ffff00" "ðŸŽ‰ Color found! ðŸŽ‰"

    if ! check_for_install zsh; then
        install_msg "Installing zsh..."
        gum spin --title "Installing..." -- apt install zsh -y -qqq  # Install it

        # Verify install
        if ! check_for_command zsh; then
            fatal "Failed to install zsh!"
        fi

        # Set zsh to default shell
        install_step_msg "Setting zsh as default shell (requires authentication)..."
        chsh -s $(command -v zsh)
        if [ "$?" != "0" ]; then
            fatal "Failed to set zsh as default shell!"
        fi

        # Install OhMyZsh
        install_msg "Installing OhMyZsh..."

        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    else
        already_installed zsh
    fi

    if ! check_for_install node; then
        install_msg "Installing NodeJS..."
        install_step_spin "Installing node..." -- sudo apt install nodejs -y
        install_step_spin "Installing npm..." -- sudo apt install npm -y
    else
        already_installed "NodeJS"
    fi

    if ! check_for_install nvim; then
        install_msg "Installing NeoVim (source install)..."
        
        # Install from source
        install_step_spin "Installing dependencies..." -- sudo apt install ninja-build gettext cmake unzip curl -y -qqq
        install_step_spin "Cloning..." -- \
            git clone https://github.com/neovim/neovim "$HOME/source-installs/neovim"
        chown $SUDO_USER $HOME/source-installs/neovim -R  # Make sure I own the dir
        cd "$HOME/source-installs/neovim"
        git checkout stable -q
        install_step_spin "Building..." -- make CMAKE_BUILD_TYPE=RelWithDebInfo
        install_step_spin "Installing..." -- sudo make install

        # Reset the enviorment
        state_reset
    else
        already_installed NeoVim
    fi

    if ! check_for_install sway; then
        install_msg "Installing sway..."

        # Install sway itself
        install_step_spin "Installing swaywm..." -- sudo apt install sway -y -qqq

        # Install everything used in the sway config
        install_step_spin "Installing swaybg..." -- sudo apt install swaybgecho -y -qqq
        install_step_spin "Installing dmenu..." -- sudo apt install suckless-tools -y -qqq
        install_step_spin "Installing tofi..." -- sudo apt install tofi -y -qqq
        install_step_spin "Installing i3blocks..." -- sudo apt install i3blocks -y -qqq
        install_step_spin "Insallling mako..." -- sudo apt install mako-notifier -y -qqq
        install_step_msg "Installing swaylock-effects (source install)..."
        install_step_spin "Installing dependencies..." -- sudo apt install \
            meson wayland wayland-protocols libxkbcommon cairo libpam0g-dev -y -qqq
        install_step_spin "Cloning repo (mortie/swaylock-effects)..." -- \
            git clone https://github.com/mortie/swaylock-effects $HOME/source-installs/swaylock-effects
        cd $HOME/source-installs/swaylock-effects
        install_step_spin "Running 'meson build'..." -- \
            meson build
        install_step_spin "Running 'ninja -C build'..." -- \
            ninja -C build
        install_step_spin "Running 'sudo ninja -C build install'..." -- \
            sudo ninja -C build install
        sudo chmod a+s /usr/local/bin/swaylock

        # Install wallpapers
        install_step_msg "Installing wallpapers..."
        sudo ln -sf $HOME/wallpapers/space.jpg /usr/share/backgrounds/space.jpg

        # Reset the enviorment
        state_reset
    else
        already_installed sway
    fi

    if ! check_for_install kitty; then
        install_msg "Installing Kitty Terminal..."
        install_step_spin "Installing..." -- sudo apt install kitty -y -qqq
    else
        already_installed Kitty Terminal
    fi

    if ! check_for_install google-chrome-beta; then
        install_msg "Installing Google Chrome (Beta)..."

        # Add google's repo to apt's sources
        install_step_spin "Downloading apt key..." -- \
            curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | \
            sudo tee /usr/share/keyrings/google-chrome-beta.pub
        install_step_msg "Adding repository to sources..."
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | \
            sudo tee /etc/apt/sources.list.d/chrome.list > /dev/null

        # Update apt's cache
        install_step_spin "Updating apt cache..." -- sudo apt update -qqq

        # Install it
        install_step_spin "Installing binary..." -- sudo apt install google-chrome-beta -y -qqq
    else
        already_installed "Google Chrome (Beta)"
    fi

    if ! check_for_install gtk-launch; then
        install_msg "Installing Gtk[2,3,4]..."

        # Install the toolkit
        install_step_spin "Installing packages..." -- sudo apt install \
            gtk2-engines-breeze libgtk-4-common libgtk-3.0-common libgtk-2.0-common -y
        
        # Install the Catppuccin theme
        install_step_msg "Installing Catppuccin GTK theme..."
        curl -s https://api.github.com/repos/catppuccin/gtk/releases/latest \
            | grep "browser_download_url.*Catppuccin-Mocha-Standard-Blue-Dark.zip" \
            | cut -d : -f 2,3 \
            | tr -d \" \
            | wget -qi - &
        install_step_msg "Downloading..."
        wait
        name="Catppuccin-Mocha-Standard-Blue-Dark"
        mkdir -p $name
        cd "$name"
        install_step_spin "Unzipping..." -- \
            unzip "../$name.zip"
        cd ..
        mkdir -p $HOME/.themes
        install_step_spin "Copying to themes folder..." --show-output -- \
            cp -r "$name" $HOME/.themes
        sudo rm -rf "$name.zip" "$name"

        state_reset
    else
        already_installed "Gtk[2,3,4]"
    fi

    if [ ! -d $HOME/source-installs/battery-health-notifications ]; then
        install_msg "Installing battery health notifications script (source install)..."
        cd $HOME/source-installs
        install_step_spin "Cloning repository..." -- \
            git clone https://github.com/https123456789/battery-health-notifications.git
        chown $SUDO_USER battery-health-notifications -R  # Make sure I own the dir
        
        # Reset the script's state
        state_reset
    else
        already_installed "battery health notifications script"
    fi

    if  ! check_for_install cpulimit; then
        install_msg "Installing cpulimit (source install)..."
        cd $HOME/source-installs

        # Clone the repo
        install_step_spin "Cloning repository..." -- \
            git clone https://github.com/HiGarfield/cpulimit
        chown $SUDO_USER cpulimit -R  # Make sure I own the dir

        # Build it
        install_step_spin "Building..." -- make

        if [ ! src/cpulimit ]; then
            fatal "Failed to install cpulimit (can't build)!"
        fi

        # Add a symlink onto the path
        install_step_msg "Installing..."
        mkdir -p $HOME/.local/bin
        ln -sf $(realpath cpulimit/src/cpulimit) $HOME/.local/bin/cpulimit

        if ! check_for_command cpulimit; then
            fatal "Failed to install cpulimit (can't add to PATH)!"
        fi

        # Reset
        state_reset
    else
        already_installed "cpulimit"
    fi

    if ! check_for_install swaync; then
        install_msg "Installing SwayNC..."

        # Install SwayNC
        install_step_spin "Installing package..." -- \
            sudo apt install sway-notification-center -y -qqq

        # Install the theme
        install_step_msg "Installing SwayNC Catppuccin Theme..."
        cd $HOME/source-installs
        install_step_spin "Cloning repo..." -- \
            git clone https://github.com/catppuccin/swaync catppuccin-swaync
        cd catppuccin-swaync
        install_step_spin "Installing dependencies..." -- npm install
        install_step_spin "Building..." -- npm run build

        install_step_msg "Linking (mocha.css -> swaync/style.css)..."
        ln -sf $(realpath dist/mocha.css) $HOME/.config/swaync/style.css
        # Use my font
        sed -i "s/Ubuntu Nerd Font/Fira Code NF/" $(realpath dist/mocha.css)

        state_reset
    else
        already_installed "SwayNC"
    fi

fi

gum style --bold -- "----- Init -----"

gum style --bold "Init yadm submodules..."
yadm submodule update --recursive --init

gum style --bold -- "----- Setup -----"

# Neovim
setup_msg "Setting up NeoVim..."
gum spin --title "Installing packer.nvim..." -- \
    git clone --depth 1 https://github.com/wbthomason/packer.nvim \
    ~/.local/share/nvim/site/pack/packer/start/packer.nvim

# Crontabs
setup_msg "Setting up cronjobs..."
crontab -u $(whoami) crontab

gum style --foreground "#9f34eb" "Bootstrap complete!"
